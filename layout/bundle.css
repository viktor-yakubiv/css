/**
 * Box
 *
 * Defines a box layout with inset spacing.
 *
 * Details: https://every-layout.dev/layouts/box
 *
 * NOTE:
 *   This does not apply background, color and outline
 *   recommended in Every Layout as these are defined in a separate
 *   coloring module.
 */

.box {
	padding-block: var(--box-padding-block, var(--padding-block));
	padding-inline: var(--box-padding-inline, var(--padding-inline));
}

/**
 * Stack
 *
 * Sets the vertical spacing between its children.
 *
 * Details: https://every-layout.dev/layouts/stack
 */

.stack {
	display: flex;
	flex-direction: column;
	gap: var(--stack-gap, var(--row-gap));
	justify-content: start;
}

/**
 * Cover
 *
 * The cover layout is useful for the page and section headers,
 * also called heroes. It centers the heading element or group vertically
 * and pushes everything else to the sides (top and bottom in vertical mode).
 *
 * Details: https://every-layout.dev/layouts/cover
 */

.cover {
	display: flex;
	flex-direction: column;
	row-gap: var(--cover-gap, var(--row-gap));
}

.cover > :where(h1, h2, h3, h4, h5, h6, hgroup) {
	margin-block: auto;
}

/**
 * Sidebar
 *
 * Makes the sidebar to occupy requested space and the content (not a sidebar)
 * to occupy the rest of space, i.e. creates wide content and a narrow sidebar.
 * If there is not enough space for content, i.e. it is more narrow than 50%
 * of the parent, the layout breaks and the sidebar is rendered before
 * or after the content (depends on the order of HTML elements).
 *
 * Details: https://every-layout.dev/layouts/sidebar
 */

:has(> .sidebar) {
	display: flex;
	flex-wrap: wrap;
	row-gap: var(--row-gap);
	column-gap: var(--column-gap);
}

:has(> .sidebar) > :where(:not(.sidebar)) {
	flex-basis: 0;
	flex-grow: 999;
	min-inline-size: 50%;
}

.sidebar {
	flex-basis: var(--sidebar-inline-size);
	flex-grow: 1;
}

/**
 * Switcher
 *
 * Toggles view between purely horizontal to purely vertical and vice versa
 * based on threshold.
 *
 * If the threshold is not set, the layout is always purely vertical.
 * It can be treated as a fallback to stack; but spacing does not fall back.
 *
 * Details: https://every-layout.dev/layouts/switcher
 */

.switcher {
	display: flex;
	flex-wrap: wrap;
	row-gap: var(--switcher-row-gap, var(--row-gap));
	column-gap: var(--switcher-column-gap, var(--column-gap));
}

.switcher > * {
	flex-basis: calc((var(--switcher-threshold, 0px) - 100%) * 999);
	flex-grow: 1;
}

/**
 * Cluster
 *
 * Sets children to lay horizontally. If there is not enough space to fit all
 * children, they break into another line. It also sets horizontal and vertical
 * spacing between children.
 *
 * Details: https://every-layout.dev/layouts/cluster
 */

.cluster {
	display: flex;
	flex-wrap: wrap;
	row-gap: var(--cluster-row-gap, var(--row-gap));
	column-gap: var(--cluster-column-gap, var(--column-gap));
	list-style: none;
}

/**
 * Grid
 *
 * Lays elements out in a grid with constant spacing between items
 * and automatic extra rows when needed. The layout is useful
 * for galleries containing pictures, cards etc.
 *
 * Details: https://every-layout.dev/layouts/grid
 */

.grid {
	display: grid;
	gap: var(--grid-gap, var(--row-gap) var(--column-gap));
}

@supports (width: min(100px, 100%)) {
	.grid {
		grid-template-columns:
			repeat(auto-fit, minmax(min(var(--grid-item-size), 100%), 1fr));
	}
}

/**
 * Hidden
 *
 * Removes element from the tree.
 */

[hidden] {
	display: none;
}

/**
 * Visually hidden
 *
 * Hides content from the display but preserves it for assistive technologies.
 * Can be hidden completely or visible when focused.
 *
 * Usage example:
 *   <h1 class="hidden visually">Invisible page title</h1>"
 *   <a href=# class="hidden visually but focusable">Back to top</a>
 */

.hidden:where(.visually:not(.focusable)),
.hidden:where(.visually.focusable:not(:focus, :focus-within)) {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip-path: inset(50%);
	white-space: nowrap;
	border: 0;
}

/**
 * Icon
 *
 * A layout designed specifically to inline pictograms to make them
 * aligned with text properly.
 *
 * Configuration options:
 *
 * `--icon-size`
 *   sets full size of image
 *
 * `--icon-outset`
 *   enables negative margin making the picture pop a bit out from text;
 *   useful when you have circular icons and want to correct visual alignment
 *
 *  `--icon-space`
 *    controls space between the icon and the closes text;
 *    In JSX it would be complete space, in pure HTML it can be added to
 *    the space width.
 *
 * Details: https://every-layout.dev/layouts/icon
 */

.icon {
	box-sizing: border-box;
	display: inline-block;
	inline-size: var(--icon-size, calc(.75em + 2 * var(--icon-outset, 0px)));
	block-size: var(--icon-size, calc(.75em + 2 * var(--icon-outset, 0px)));
	margin-block: calc(-1 * var(--icon-outset, 0px));
	margin-inline: calc(var(--icon-space, 1ch) - var(--icon-outset, 0px));
	color: var(--icon-color, inherit);
	fill: currentcolor;
}

@supports (inline-size: 1cap) {
	.icon {
		inline-size: var(--icon-size, calc(1cap + 2 * var(--icon-outset, 0px)));
		block-size: var(--icon-size, calc(1cap + 2 * var(--icon-outset, 0px)));
	}
}

.icon:where(:first-child) {
	margin-inline-start: calc(-1 * var(--icon-outset, 0px));
}

.icon:where(:last-child) {
	margin-inline-end: calc(-1 * var(--icon-outset, 0px));
}

/*!
 * Layout Fixtures
 *
 * Prevent most common side effects of layouts.
 */

/**
 * Reset default styling if a layout used on a list
 */

:where(ul, ol, menu):where(.stack, .switcher, .cluster, .grid, :has(> .sidebar)) {
	padding-left: 0;
	list-style: none;
}

:where(ul, ol, menu):where(.box) {
	list-style: none;
}

/**
 * Remove global margin on any children
 * to prevent weird spacing in flexible containers
 */

:where(.stack, .switcher, .cluster, .cover, .grid, :has(> .sidebar)) > * {
	margin-block: 0;
}

/**
 * Display block for Box layout if not set
 */

:where(.box) {
	display: block; /* 4 */
}

/**
 * Avoid stack spacing for the line breaking element
 * when they go after something
 */

:where(br) {
	margin-block-start: unset;
}

/*# sourceMappingURL=data:application/json;base64, */